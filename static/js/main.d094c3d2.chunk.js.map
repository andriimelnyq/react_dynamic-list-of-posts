{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","types/Errors.ts","api/api.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setLoadingComments","isCommentsVisible","postId","id","className","map","post","title","type","classNames","onClick","handlePostButton","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Errors","client","postComment","deleteComment","commentId","Loader","NewCommentForm","sendNewComment","isFormSubmiting","useState","name","setName","email","setEmail","setBody","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasBodyError","setHasBodyError","submitNewCommentForm","e","a","preventDefault","handleInput","inputName","value","onSubmit","htmlFor","placeholder","onChange","target","PostDetails","error","setError","isLoadingComments","setIsLoadingComments","comments","setComments","isFormVisible","setIsFormVisible","setIsFormSubmiting","isVisibleError","COMMENTS","COMMENT_ADD","COMMENT_DELETE","loadComments","commentsFromServer","newComment","removeComment","filter","comment","useEffect","length","href","UserSelector","users","selectedUser","setSelectedUser","isOpenUsersList","setIsOpenUsersList","disabled","USERS","role","user","App","setUsers","userPosts","setUserPosts","isLoading","setIsLoading","NONE","loadUsers","usersFromServer","loadSelectedUserPosts","userId","POSTS","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d094c3d2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n  setLoadingComments: (isLoad: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPost, setSelectedPost, setLoadingComments,\n}) => {\n  const isCommentsVisible = (postId: number) => (\n    selectedPost && selectedPost.id === postId);\n\n  const handlePostButton = (post: Post) => {\n    setLoadingComments(true);\n    if (isCommentsVisible(post.id)) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': !isCommentsVisible(post.id) },\n                  )}\n                  onClick={() => handlePostButton(post)}\n                >\n                  {isCommentsVisible(post.id) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Errors {\n  NONE = '',\n  USERS = 'Unable to load users',\n  POSTS = 'Unable to load posts',\n  COMMENTS = 'Unable to load comments',\n  COMMENT_ADD = 'Unable to add comment',\n  COMMENT_DELETE = 'Unable to delete comment',\n}\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPostsOfUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getCommentsOfPost = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: Comment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  sendNewComment: (data: CommentData) => void,\n  isFormSubmiting: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  sendNewComment, isFormSubmiting,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasBodyError, setHasBodyError] = useState(false);\n\n  const submitNewCommentForm = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!name) {\n      setHasNameError(true);\n    }\n\n    if (!email) {\n      setHasEmailError(true);\n    }\n\n    if (!body) {\n      setHasBodyError(true);\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    sendNewComment({ name, email, body });\n    setBody('');\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setHasNameError(false);\n    setHasEmailError(false);\n    setHasBodyError(false);\n  };\n\n  const handleInput = (inputName: string, value: string) => {\n    switch (inputName) {\n      case 'name':\n        setName(value);\n        setHasNameError(false);\n        break;\n\n      case 'email':\n        setEmail(value);\n        setHasEmailError(false);\n        break;\n\n      case 'body':\n        setBody(value);\n        setHasBodyError(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={submitNewCommentForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasNameError },\n            )}\n            value={name}\n            onChange={e => handleInput('name', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasEmailError },\n            )}\n            value={email}\n            onChange={e => handleInput('email', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': hasBodyError },\n            )}\n            value={body}\n            onChange={e => handleInput('body', e.target.value)}\n          />\n        </div>\n\n        {hasBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isFormSubmiting },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getCommentsOfPost, postComment } from '../api/api';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { Errors } from '../types/Errors';\nimport { Comment, CommentData } from '../types/Comment';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null,\n  error: Errors,\n  setError: (error: Errors) => void,\n  isLoadingComments: boolean,\n  setIsLoadingComments: (isLoad: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost, error, setError, isLoadingComments, setIsLoadingComments,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [isFormSubmiting, setIsFormSubmiting] = useState(false);\n\n  const isVisibleError = (\n    error === Errors.COMMENTS\n    || error === Errors.COMMENT_ADD\n    || error === Errors.COMMENT_DELETE\n  );\n\n  const loadComments = async () => {\n    if (selectedPost) {\n      try {\n        const commentsFromServer = await getCommentsOfPost(selectedPost.id);\n\n        setComments(commentsFromServer);\n      } catch {\n        setError(Errors.COMMENTS);\n      } finally {\n        setIsLoadingComments(false);\n      }\n    }\n  };\n\n  const sendNewComment = async (data: CommentData) => {\n    if (selectedPost) {\n      try {\n        setIsFormSubmiting(true);\n        const newComment = await postComment({\n          ...data,\n          postId: selectedPost.id,\n        });\n\n        setComments([\n          ...comments,\n          newComment,\n        ]);\n      } catch {\n        setError(Errors.COMMENT_ADD);\n      } finally {\n        setIsFormSubmiting(false);\n      }\n    }\n  };\n\n  const removeComment = async (commentId?: number) => {\n    if (commentId) {\n      deleteComment(commentId);\n\n      setComments(comments.filter(comment => comment.id !== commentId));\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setIsFormVisible(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments\n            ? <Loader />\n            : (\n              <>\n                {isVisibleError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {!comments.length\n                && error !== Errors.COMMENTS\n                && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                {comments.length > 0 && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {comments.map(comment => (\n                      <article className=\"message is-small\" data-cy=\"Comment\">\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${comment.email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {comment.name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => removeComment(comment.id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {comment.body}\n                        </div>\n                      </article>\n                    ))}\n                  </>\n                )}\n\n                {!isFormVisible && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsFormVisible(true)}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm\n            sendNewComment={sendNewComment}\n            isFormSubmiting={isFormSubmiting}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n  error: Errors,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, setSelectedUser, error, setSelectedPost,\n}) => {\n  const [isOpenUsersList, setIsOpenUsersList] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpenUsersList(!isOpenUsersList)}\n          disabled={error === Errors.USERS}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpenUsersList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser?.id === user.id },\n                )}\n                key={user.id}\n                onClick={() => {\n                  setSelectedUser(user);\n                  setIsOpenUsersList(false);\n                  setSelectedPost(null);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers, getPostsOfUser } from './api/api';\nimport { Errors } from './types/Errors';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [error, setError] = useState(Errors.NONE);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(Errors.USERS);\n    }\n  };\n\n  const loadSelectedUserPosts = async () => {\n    if (selectedUser) {\n      try {\n        setIsLoading(true);\n        const posts = await getPostsOfUser(selectedUser.id);\n\n        setUserPosts(posts);\n      } catch {\n        setError(Errors.POSTS);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    loadSelectedUserPosts();\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  error={error}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoading\n                  ? <Loader />\n                  : (\n                    <>\n                      {(error === Errors.POSTS || error === Errors.USERS) && (\n                        <div\n                          className=\"notification is-danger\"\n                          data-cy=\"PostsLoadingError\"\n                        >\n                          {error}\n                        </div>\n                      )}\n\n                      {!selectedUser && error === Errors.NONE && (\n                        <p data-cy=\"NoSelectedUser\">\n                          No user selected\n                        </p>\n                      )}\n\n                      {selectedUser\n                      && !userPosts.length\n                      && error !== Errors.POSTS\n                      && (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      )}\n\n                      {userPosts.length > 0 && (\n                        <PostsList\n                          posts={userPosts}\n                          selectedPost={selectedPost}\n                          setSelectedPost={setSelectedPost}\n                          setLoadingComments={setIsLoadingComments}\n                        />\n                      )}\n                    </>\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  error={error}\n                  setError={setError}\n                  isLoadingComments={isLoadingComments}\n                  setIsLoadingComments={setIsLoadingComments}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}